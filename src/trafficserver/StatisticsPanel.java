/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trafficserver;

/**
 *
 * @author Visakh Venugopal
 */
import static java.awt.Color.black;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JPanel;
import javax.swing.Timer;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class StatisticsPanel extends javax.swing.JPanel {

    /**
     * Creates new form StatiticsPanel
     */
    private JPanel chartCanvas = null;
    private XYDataset dataSetCollection = null;
    private JFreeChart chart = null;
    
    public int startX ;
    public int stopX  ;
    Random rnd = null;
    public XYSeries day1 = new XYSeries( "Today" );  
    public XYSeries day2 = new XYSeries( "Yestreday" ); 
    public XYSeries day3 = new XYSeries( "Daybefore" );
    final XYSeriesCollection dataset = new XYSeriesCollection( );
    
    
    public StatisticsPanel() 
    {   
        initComponents();
        startX = 0;
        stopX  = 60;
        rnd = new Random();
        
        createDataset();
        addPlots();
        dataSetCollection = dataset;
        chart = createChart(dataSetCollection);
        chartCanvas = new ChartPanel(chart);
        chartCanvas.setBackground(null);
        this.panelChart.add(chartCanvas); 
        
        panelNode.setVisible(false);
        
            
        new UpdateDataset(this).start();
    }
    
    
void renderChart()
{
    addPlots();
    dataSetCollection = dataset;
    chart = createChart(dataSetCollection);
    chartCanvas = new ChartPanel(chart);        
    chartCanvas.setBackground(black);
    //chartCanvas.setVisible(true);
    
}

void addPlots()
{
    dataset.removeAllSeries();
    if(checkBoxDay1.isSelected())
        dataset.addSeries( day1 ); 
    if(checkBoxDay2.isSelected())
        dataset.addSeries( day2 ); 
    if(checkBoxDay3.isSelected())
        dataset.addSeries( day3 ); 
}
private void createDataset()
   {    
      day1.clear();
      day2.clear();
      day3.clear();
      for(int i=startX; i<=stopX; i++)
      {
          day1.add(i, rnd.nextInt(3));
          day2.add(i, rnd.nextInt(3));
          day3.add(i, rnd.nextInt(3));
      }
      
   }

private JFreeChart createChart( XYDataset dataset )
   {
      JFreeChart xyLineChart = ChartFactory.createXYLineChart("CongestionInfo", "Time", "Congestion Rate", 
                                                                dataset, PlotOrientation.VERTICAL, 
                                                                true, true, true);
      return xyLineChart;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        panelChart = new javax.swing.JPanel();
        panelMenu = new javax.swing.JPanel();
        checkBoxDay1 = new javax.swing.JCheckBox();
        checkBoxDay2 = new javax.swing.JCheckBox();
        checkBoxDay3 = new javax.swing.JCheckBox();
        checkBoxSingleNode = new javax.swing.JCheckBox();
        panelNode = new javax.swing.JPanel();
        labelNodeId = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        labelNodeName = new javax.swing.JLabel();
        labelGeoLocation = new javax.swing.JLabel();
        labelModeIndicator = new javax.swing.JLabel();
        labelStatiticsMode = new javax.swing.JLabel();

        setName(""); // NOI18N

        labelTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTitle.setText("Statistics");

        panelChart.setBackground(new java.awt.Color(255, 153, 153));
        panelChart.setLayout(new javax.swing.OverlayLayout(panelChart));

        panelMenu.setBackground(new java.awt.Color(255, 255, 153));
        panelMenu.setPreferredSize(new java.awt.Dimension(180, 348));

        checkBoxDay1.setBackground(new java.awt.Color(255, 255, 153));
        checkBoxDay1.setSelected(true);
        checkBoxDay1.setText("Today");
        checkBoxDay1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxDay1StateChanged(evt);
            }
        });

        checkBoxDay2.setBackground(new java.awt.Color(255, 255, 153));
        checkBoxDay2.setSelected(true);
        checkBoxDay2.setText("YesterDay");
        checkBoxDay2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxDay2StateChanged(evt);
            }
        });

        checkBoxDay3.setBackground(new java.awt.Color(255, 255, 153));
        checkBoxDay3.setSelected(true);
        checkBoxDay3.setText("ThisWeek");
        checkBoxDay3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxDay3StateChanged(evt);
            }
        });

        checkBoxSingleNode.setBackground(new java.awt.Color(255, 255, 153));
        checkBoxSingleNode.setText("SingleMode");
        checkBoxSingleNode.setActionCommand("SingleMode");
        checkBoxSingleNode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxSingleNodeStateChanged(evt);
            }
        });

        panelNode.setBackground(new java.awt.Color(255, 255, 153));

        labelNodeId.setText("NodeID");
        labelNodeId.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110" }));

        labelNodeName.setText("Name");

        labelGeoLocation.setText("location");

        javax.swing.GroupLayout panelNodeLayout = new javax.swing.GroupLayout(panelNode);
        panelNode.setLayout(panelNodeLayout);
        panelNodeLayout.setHorizontalGroup(
            panelNodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNodeName)
                    .addGroup(panelNodeLayout.createSequentialGroup()
                        .addComponent(labelNodeId)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelGeoLocation))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelNodeLayout.setVerticalGroup(
            panelNodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNodeId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelNodeName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelGeoLocation)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelMenuLayout = new javax.swing.GroupLayout(panelMenu);
        panelMenu.setLayout(panelMenuLayout);
        panelMenuLayout.setHorizontalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMenuLayout.createSequentialGroup()
                        .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxDay1)
                            .addComponent(checkBoxDay2)
                            .addComponent(checkBoxDay3)
                            .addComponent(checkBoxSingleNode))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelNode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelMenuLayout.setVerticalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxDay1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxDay2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxDay3)
                .addGap(18, 18, 18)
                .addComponent(checkBoxSingleNode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        labelModeIndicator.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelModeIndicator.setText("Global");

        labelStatiticsMode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelStatiticsMode.setText("Statitics Mode");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addComponent(labelStatiticsMode, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelModeIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelModeIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelStatiticsMode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(panelChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxDay1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxDay1StateChanged
        // TODO add your handling code here:
        renderChart();
    }//GEN-LAST:event_checkBoxDay1StateChanged

    private void checkBoxDay2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxDay2StateChanged
        // TODO add your handling code here:
        renderChart();
    }//GEN-LAST:event_checkBoxDay2StateChanged

    private void checkBoxDay3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxDay3StateChanged
        // TODO add your handling code here:
        renderChart();
    }//GEN-LAST:event_checkBoxDay3StateChanged

    private void checkBoxSingleNodeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxSingleNodeStateChanged
        // TODO add your handling code here:
        if(checkBoxSingleNode.isSelected())
        {
            labelModeIndicator.setText("Single Node : "+20);
            panelNode.setVisible(true);
        }            
        else
        {
            labelModeIndicator.setText("Global");
            panelNode.setVisible(false);
        }
            
    }//GEN-LAST:event_checkBoxSingleNodeStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxDay1;
    private javax.swing.JCheckBox checkBoxDay2;
    private javax.swing.JCheckBox checkBoxDay3;
    private javax.swing.JCheckBox checkBoxSingleNode;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel labelGeoLocation;
    private javax.swing.JLabel labelModeIndicator;
    private javax.swing.JLabel labelNodeId;
    private javax.swing.JLabel labelNodeName;
    private javax.swing.JLabel labelStatiticsMode;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelChart;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel panelNode;
    // End of variables declaration//GEN-END:variables

}


class UpdateDataset extends Timer
{
    public UpdateDataset(StatisticsPanel stp)
    {
        super(2000, new ActionListener() 
                    {
                        Random rnd = new Random();
                        @Override
                                public void actionPerformed(ActionEvent e)
                                {   int i,x;
                                
                                    //for( i = stp.startX ;i<stp.stopX-1 ; i++)
                                    for( i = 1 ;i<60 ; i++)
                                    {
                                        stp.day1.updateByIndex(i, stp.day1.getY(i+1));
                                        stp.day2.updateByIndex(i, stp.day2.getY(i+1));
                                        stp.day3.updateByIndex(i, stp.day3.getY(i+1));
                                    }
                                    stp.stopX++;
                                    stp.day1.add(stp.stopX, stp.rnd.nextInt(3));
                                    stp.day1.delete(0,0);
                                    stp.day2.add(stp.stopX, stp.rnd.nextInt(3));
                                    stp.day2.delete(0,0);
                                    stp.day3.add(stp.stopX, stp.rnd.nextInt(3));
                                    stp.day3.delete(0,0);
                                    //stp.startX++;
                                }
                        
                    }
            );
    }  
}